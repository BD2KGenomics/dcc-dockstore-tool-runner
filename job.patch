--- job.py	2017-05-18 20:30:01.573793271 +0000
+++ job_new.py	2017-05-22 21:16:35.464979861 +0000
@@ -34,7 +34,6 @@
 import json
 import sys
 import subprocess
-
 with open(sys.argv[1], "r") as f:
     popen_description = json.load(f)
     commands = popen_description["commands"]
@@ -147,6 +146,10 @@
 
         if img_id:
             runtime = ["docker", "run", "-i"]
+            runtime.append(u"--volume=%s:%s:rw" % ("/var/run/docker.sock", "/var/run/docker.sock"))
+            #runtime.append(u"--volume=%s:%s:rw" % (os.path.normpath(os.path.dirname(self.outdir)), os.path.normpath(os.path.dirname(self.outdir))))
+            runtime.append(u"--volume=%s:%s:rw" % ('/datastore', '/datastore'))
+            
             for src in self.pathmapper.files():
                 vol = self.pathmapper.mapper(src)
                 if vol.type == "File":
@@ -156,9 +159,9 @@
                     with open(createtmp, "w") as f:
                         f.write(vol.resolved.encode("utf-8"))
                     runtime.append(u"--volume=%s:%s:ro" % (createtmp, vol.target))
-            runtime.append(u"--volume=%s:%s:rw" % (os.path.realpath(self.outdir), self.builder.outdir))
-            runtime.append(u"--volume=%s:%s:rw" % (os.path.realpath(self.tmpdir), "/tmp"))
-            runtime.append(u"--workdir=%s" % (self.builder.outdir))
+            #runtime.append(u"--volume=%s:%s:rw" % (os.path.abspath(self.outdir), "/var/spool/cwl"))
+            runtime.append(u"--volume=%s:%s:rw" % (os.path.normpath(os.path.dirname(self.tmpdir)), "/tmp"))
+            runtime.append(u"--workdir=%s" % (os.path.normpath(os.path.dirname(self.outdir))))
             runtime.append("--read-only=true")
 
             if kwargs.get("custom_net", None) is not None:
@@ -177,12 +180,12 @@
             if rm_container:
                 runtime.append("--rm")
 
-            runtime.append("--env=TMPDIR=/tmp")
+            runtime.append("--env=TMPDIR="+os.path.normpath(os.path.dirname(self.tmpdir)))
 
             # spec currently says "HOME must be set to the designated output
             # directory." but spec might change to designated temp directory.
             # runtime.append("--env=HOME=/tmp")
-            runtime.append("--env=HOME=%s" % self.builder.outdir)
+            runtime.append("--env=HOME="+os.path.normpath(os.path.dirname(self.outdir)))
 
             for t, v in self.environment.items():
                 runtime.append(u"--env=%s=%s" % (t, v))
@@ -190,8 +193,8 @@
             runtime.append(img_id)
         else:
             env = self.environment
-            if not os.path.exists(self.tmpdir):
-                os.makedirs(self.tmpdir)
+            if not os.path.exists(os.path.normpath(os.path.dirname(self.tmpdir))):
+                os.makedirs(os.path.normpath(os.path.dirname(self.tmpdir)))
             vars_to_preserve = kwargs.get("preserve_environment")
             if kwargs.get("preserve_entire_environment"):
                 vars_to_preserve = os.environ
@@ -200,7 +203,7 @@
                     if key in vars_to_preserve and key not in env:
                         env[key] = value
             env["HOME"] = self.outdir
-            env["TMPDIR"] = self.tmpdir
+            env["TMPDIR"] = os.path.normpath(os.path.dirname(self.tmpdir))
 
             stageFiles(self.pathmapper, os.symlink)
 
@@ -214,7 +217,7 @@
 
         _logger.info(u"[job %s] %s$ %s%s%s%s",
                      self.name,
-                     self.outdir,
+                     os.path.normpath(os.path.dirname(self.outdir)),
                      " \\\n    ".join([shellescape.quote(Text(arg)) if shouldquote(Text(arg)) else Text(arg) for arg in
                                        (runtime + self.command_line)]),
                      u' < %s' % self.stdin if self.stdin else '',
@@ -228,8 +231,8 @@
 
         try:
             if self.generatefiles["listing"]:
-                generatemapper = PathMapper([self.generatefiles], self.outdir,
-                                            self.outdir, separateDirs=False)
+                generatemapper = PathMapper([self.generatefiles], os.path.normpath(os.path.dirname(self.outdir)),
+                                            os.path.normpath(os.path.dirname(self.outdir)), separateDirs=False)
                 _logger.debug(u"[job %s] initial work dir %s", self.name,
                               json.dumps({p: generatemapper.mapper(p) for p in generatemapper.files()}, indent=4))
 
@@ -249,7 +252,7 @@
 
             stderr_path = None
             if self.stderr:
-                abserr = os.path.join(self.outdir, self.stderr)
+                abserr = os.path.join(os.path.normpath(os.path.dirname(self.outdir)), self.stderr)
                 dnerr = os.path.dirname(abserr)
                 if dnerr and not os.path.exists(dnerr):
                     os.makedirs(dnerr)
@@ -257,7 +260,7 @@
 
             stdout_path = None
             if self.stdout:
-                absout = os.path.join(self.outdir, self.stdout)
+                absout = os.path.join(os.path.normpath(os.path.dirname(self.outdir)), self.stdout)
                 dn = os.path.dirname(absout)
                 if dn and not os.path.exists(dn):
                     os.makedirs(dn)
@@ -270,7 +273,7 @@
                 stdout_path=stdout_path,
                 stderr_path=stderr_path,
                 env=env,
-                cwd=self.outdir,
+                cwd=os.path.normpath(os.path.dirname(self.outdir)),
                 build_job_script=build_job_script,
             )
 
@@ -295,7 +298,7 @@
 
                 stageFiles(generatemapper, linkoutdir, ignoreWritable=True)
 
-            outputs = self.collect_outputs(self.outdir)
+            outputs = self.collect_outputs(os.path.normpath(os.path.dirname(self.outdir)))
 
         except OSError as e:
             if e.errno == 2:
@@ -328,12 +331,12 @@
             shutil.rmtree(self.stagedir, True)
 
         if rm_tmpdir:
-            _logger.debug(u"[job %s] Removing temporary directory %s", self.name, self.tmpdir)
+            _logger.debug(u"[job %s] Removing temporary directory %s", self.name, os.path.normpath(os.path.dirname(self.tmpdir)))
             shutil.rmtree(self.tmpdir, True)
 
-        if move_outputs == "move" and empty_subtree(self.outdir):
-            _logger.debug(u"[job %s] Removing empty output directory %s", self.name, self.outdir)
-            shutil.rmtree(self.outdir, True)
+        if move_outputs == "move" and empty_subtree(os.path.normpath(os.path.dirname(self.outdir))):
+            _logger.debug(u"[job %s] Removing empty output directory %s", self.name, os.path.normpath(os.path.dirname(self.outdir)))
+            shutil.rmtree(os.path.normpath(os.path.dirname(self.outdir)), True)
 
 
 def _job_popen(
